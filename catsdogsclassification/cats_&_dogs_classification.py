# -*- coding: utf-8 -*-
"""cats & Dogs classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13d7-TYsFHhd8YxMpo5kI8TBWu-nybapi
"""

+-%tensorflow_version 1.x  #to decrease my tensorflow version
import tensorflow as tf
print(tf.__version__)

#import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras import layers, activations
from tensorflow.keras.layers import Dense, Conv2D, Flatten, Dropout, MaxPooling2D, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import os
import pandas as pd
import numpy as np
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import keras
from keras.preprocessing.image import img_to_array, load_img

"""**Loading Images**"""

from google.colab import drive
drive.mount('/content/drive')

from zipfile import ZipFile
file_name = "/content/drive/MyDrive/dogs-vs-cats.zip"
with ZipFile(file_name, "r") as zip:
  zip.extractall()
  print('done')

"""**Prepare dataset for training model:**"""

train_names = os.listdir("/content/dogs-vs-cats/train/train")

categories = []
for train_image in train_names:
  category = train_image.split(".")[0]
  if category == "dog":
    categories.append(1)
  else:
    categories.append(0)

df = pd.DataFrame({"file name":train_names,
                   "category":categories})
df.head()

"""**image properties:**"""

Image_Width=128
Image_Height=128
Image_Size=(Image_Width,Image_Height)
Image_Channels=3

"""**Neural net model:**"""

model=Sequential()
model.add(Conv2D(32,(3,3),activation='relu',input_shape=(Image_Width,Image_Height,Image_Channels)))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(64,(3,3),activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
model.add(Conv2D(128,(3,3),activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(512,activation='relu'))
model.add(BatchNormalization())
model.add(Dropout(0.5))
model.add(Dense(2,activation='softmax'))

#model compiling 
model.compile(loss='categorical_crossentropy',
  optimizer='rmsprop',metrics=['accuracy'])

model.summary()

"""**Callbacks and Learning rate:**"""

from keras.callbacks import EarlyStopping, ReduceLROnPlateau
early_stop = EarlyStopping(patience=10)
learning_rate_reduction = ReduceLROnPlateau(monitor="val_loss", verbose = 1, factor = 0.5, min_lr=0.00001)
callbacks = [early_stop, learning_rate_reduction]

df['category'] = df['category'].replace({0:'cat', 1:'dog'})
#df.head()

train_df, val_df = train_test_split(df,test_size=0.20,
  random_state=42)

train_df = train_df.reset_index(drop=True)
val_df = val_df.reset_index(drop=True)

total_train=train_df.shape[0]
total_validate=val_df.shape[0]
batch_size=15
test_batch = 20

"""**Data Augumentation**"""

train_datagen = ImageDataGenerator(rotation_range=15,
                                rescale=1./255,
                                shear_range=0.1,
                                zoom_range=0.2,
                                horizontal_flip=True,
                                width_shift_range=0.1,
                                height_shift_range=0.1
                                )

train_generator = train_datagen.flow_from_dataframe(train_df,
                                                 "/content/dogs-vs-cats/train/train",x_col='file name',y_col='category',
                                                 target_size=Image_Size,
                                                 class_mode='categorical',
                                                 batch_size=batch_size)


validation_datagen = ImageDataGenerator(rescale=1./255)

validation_generator = validation_datagen.flow_from_dataframe(
    val_df, 
    "/content/dogs-vs-cats/train/train", 
    x_col='file name',
    y_col='category',
    target_size=Image_Size,
    class_mode='categorical',
    batch_size=batch_size
)
test_datagen = ImageDataGenerator(rotation_range=15,
                                rescale=1./255,
                                shear_range=0.1,
                                zoom_range=0.2,
                                horizontal_flip=True,
                                width_shift_range=0.1,
                                height_shift_range=0.1)


test_generator = train_datagen.flow_from_dataframe(train_df,
                                                 "/content/dogs-vs-cats/train/train",x_col='file name',y_col='category',
                                                 target_size=Image_Size,
                                                 class_mode='categorical',
                                                 batch_size=test_batch)

#train_generator.shape()

"""**Model Training**"""

epochs=10
history = model.fit_generator(
    train_generator, 
    epochs=epochs,
    validation_data=validation_generator,
    validation_steps=total_validate//batch_size,
    steps_per_epoch=total_train//batch_size,
    callbacks=callbacks
)

"""**Saving the model**"""

model.save("c&g.h5")

"""**Test Data Preparation**"""

test_data = os.listdir("/content/dogs-vs-cats/test1/test1")
test_df = pd.DataFrame({
    'filename': test_data
})
nb_samples = test_df.shape[0]

predict = model.predict_generator(test_generator, steps=np.ceil(nb_samples/test_batch))

"""**Convert labels to categories:**"""

test_df['category'] = np.argmax(predict, axis=-1)
label_map = dict((v,k) for k,v in train_generator.class_indices.items())
test_df['category'] = test_df['category'].replace(label_map)
test_df['category'] = test_df['category'].replace({ 'dog': 1, 'cat': 0 })

len(os.listdir("/content/dogs-vs-cats/test1/test1"))

"""**Visualize the prediction results:**"""

sample_test = test_df.head(18)
sample_test.head()
plt.figure(figsize=(12, 24))
for index, row in sample_test.iterrows():
    filename = row['filename']
    category = row['category']
    img = load_img("/content/dogs-vs-cats/test1/test1/"+ filename, target_size=Image_Size)
    plt.subplot(6, 3, index+1)
    plt.imshow(img)
    plt.xlabel(filename + '(' + "{}".format(category) + ')' )
plt.tight_layout()
plt.show()

"""**Test your model performance on custom data:**"""

import matplotlib.image as mpimg
image = mpimg.imread("/content/cat1.jpg")
plt.imshow(image)
plt.show()

results={
    0:'cat',
    1:'dog'
}
from PIL import Image
import numpy as np
im=Image.open("/content/cat1.jpg")
im=im.resize(Image_Size)
im=np.expand_dims(im,axis=0)
im=np.array(im)
im=im/255
pred=model.predict_classes([im])[0]
print(pred,results[pred])

image = mpimg.imread("/content/dog2.jpg")
plt.imshow(image)
plt.show()

im=Image.open("/content/dog2.jpg")
im=im.resize(Image_Size)
im=np.expand_dims(im,axis=0)
im=np.array(im)
im=im/255
pred=model.predict_classes([im])[0]
print(pred,results[pred])

# import tkinter as tk
# from tkinter import filedialog
# from tkinter import *
# from PIL import ImageTk, Image
# import numpy

# from keras.models import load_model
# model = load_model('model1_catsVSdogs_10epoch.h5')
# #dictionary to label all traffic signs class.
# classes = { 
#     0:'its a cat',
#     1:'its a dog',
 
# }
# #initialise GUI
# top=tk.Tk()
# top.geometry('800x600')
# top.title('CatsVSDogs Classification')
# top.configure(background='#CDCDCD')
# label=Label(top,background='#CDCDCD', font=('arial',15,'bold'))
# sign_image = Label(top)
# def classify(file_path):
#     global label_packed
#     image = Image.open(file_path)
#     image = image.resize((128,128))
#     image = numpy.expand_dims(image, axis=0)
#     image = numpy.array(image)
#     image = image/255
#     pred = model.predict_classes([image])[0]
#     sign = classes[pred]
#     print(sign)
#     label.configure(foreground='#011638', text=sign) 
# def show_classify_button(file_path):
#     classify_b=Button(top,text="Classify Image",
#    command=lambda: classify(file_path),
#    padx=10,pady=5)
#     classify_b.configure(background='#364156', foreground='white',
# font=('arial',10,'bold'))
#     classify_b.place(relx=0.79,rely=0.46)

# def upload_image():
#     try:
#         file_path=filedialog.askopenfilename()
#         uploaded=Image.open(file_path)
#         uploaded.thumbnail(((top.winfo_width()/2.25),
#     (top.winfo_height()/2.25)))
#         im=ImageTk.PhotoImage(uploaded)
#         sign_image.configure(image=im)
#         sign_image.image=im
#         label.configure(text='')
#         show_classify_button(file_path)
#     except:
#         pass
# upload=Button(top,text="Upload an image",command=upload_image,padx=10,pady=5)
# upload.configure(background='#364156', foreground='white',font=('arial',10,'bold'))
# upload.pack(side=BOTTOM,pady=50)
# sign_image.pack(side=BOTTOM,expand=True)
# label.pack(side=BOTTOM,expand=True)
# heading = Label(top, text="CatsVSDogs Classification",pady=20, font=('arial',20,'bold'))
# heading.configure(background='#CDCDCD',foreground='#364156')
# heading.pack()
# top.mainloop()